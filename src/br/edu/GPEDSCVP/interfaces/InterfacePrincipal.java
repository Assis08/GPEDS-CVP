/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package br.edu.GPEDSCVP.interfaces;

import br.edu.GPEDSCVP.classe.Acesso;
import br.edu.GPEDSCVP.classe.Permissao;
import br.edu.GPEDSCVP.classe.Tela;
import br.edu.GPEDSCVP.dao.daoAcesso;
import br.edu.GPEDSCVP.dao.daoPermissao;
import br.edu.GPEDSCVP.dao.daoTela;
import br.edu.GPEDSCVP.util.ValidaAcesso;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author Willys
 */
public class InterfacePrincipal extends javax.swing.JFrame {

      daoTela dao_tela;
      daoPermissao dao_permissao;
      daoAcesso dao_acesso; 
      Acesso acesso;
      Tela tela;
      ValidaAcesso validaacesso;
      Permissao permissao;
      
    public InterfacePrincipal() {
        //Inicializa como tela inteira
        this.setExtendedState(MAXIMIZED_BOTH);
        initComponents();
        
        dao_permissao = new daoPermissao();
        dao_tela = new daoTela();
        dao_acesso = new daoAcesso();
        acesso = new Acesso();
        tela = new Tela();
        validaacesso = new ValidaAcesso();
        permissao = new Permissao();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMBMenuPrincipal = new javax.swing.JMenuBar();
        jMCadastros = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenuItem7 = new javax.swing.JMenuItem();
        jMenuItem8 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem9 = new javax.swing.JMenuItem();
        jMenuItem10 = new javax.swing.JMenuItem();
        jMenuItem13 = new javax.swing.JMenuItem();
        jMGerenciarProjetos = new javax.swing.JMenu();
        jMenuItem11 = new javax.swing.JMenuItem();
        jMenuItem12 = new javax.swing.JMenuItem();
        jMCustos = new javax.swing.JMenu();
        jMAlterarMoeda = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Tela Principal");

        jMBMenuPrincipal.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jMBMenuPrincipalFocusGained(evt);
            }
        });

        jMCadastros.setText("Cadastros");
        jMCadastros.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMCadastrosActionPerformed(evt);
            }
        });

        jMenuItem1.setText("Pessoas");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenuItem1.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                jMenuItem1AncestorAdded(evt);
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        jMCadastros.add(jMenuItem1);

        jMenuItem3.setText("Cidades");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMCadastros.add(jMenuItem3);

        jMenuItem5.setText("Países");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMCadastros.add(jMenuItem5);

        jMenuItem4.setText("Estados");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMCadastros.add(jMenuItem4);

        jMenuItem6.setText("Projetos");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMCadastros.add(jMenuItem6);

        jMenuItem7.setText("Componentes");
        jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem7ActionPerformed(evt);
            }
        });
        jMCadastros.add(jMenuItem7);

        jMenuItem8.setText("Materiais");
        jMenuItem8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem8ActionPerformed(evt);
            }
        });
        jMCadastros.add(jMenuItem8);

        jMenuItem2.setText("Moedas");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMCadastros.add(jMenuItem2);

        jMenuItem9.setText("Datasheets");
        jMenuItem9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem9ActionPerformed(evt);
            }
        });
        jMCadastros.add(jMenuItem9);

        jMenuItem10.setText("Fornecimentos");
        jMenuItem10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem10ActionPerformed(evt);
            }
        });
        jMCadastros.add(jMenuItem10);

        jMenuItem13.setText("Normas");
        jMenuItem13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem13ActionPerformed(evt);
            }
        });
        jMCadastros.add(jMenuItem13);

        jMBMenuPrincipal.add(jMCadastros);

        jMGerenciarProjetos.setText("Gerenciar Projetos");
        jMGerenciarProjetos.addMenuListener(new javax.swing.event.MenuListener() {
            public void menuCanceled(javax.swing.event.MenuEvent evt) {
            }
            public void menuDeselected(javax.swing.event.MenuEvent evt) {
            }
            public void menuSelected(javax.swing.event.MenuEvent evt) {
                jMGerenciarProjetosMenuSelected(evt);
            }
        });
        jMGerenciarProjetos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMGerenciarProjetosMouseClicked(evt);
            }
        });
        jMGerenciarProjetos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMGerenciarProjetosActionPerformed(evt);
            }
        });

        jMenuItem11.setText("Versões");
        jMenuItem11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem11ActionPerformed(evt);
            }
        });
        jMGerenciarProjetos.add(jMenuItem11);

        jMenuItem12.setText("Comparar");
        jMGerenciarProjetos.add(jMenuItem12);

        jMBMenuPrincipal.add(jMGerenciarProjetos);

        jMCustos.setText("Custos");
        jMCustos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMCustosMouseClicked(evt);
            }
        });
        jMBMenuPrincipal.add(jMCustos);

        jMAlterarMoeda.setText("Atualizar Moeda");
        jMAlterarMoeda.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMAlterarMoedaMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jMAlterarMoedaMouseEntered(evt);
            }
        });
        jMAlterarMoeda.addMenuListener(new javax.swing.event.MenuListener() {
            public void menuCanceled(javax.swing.event.MenuEvent evt) {
            }
            public void menuDeselected(javax.swing.event.MenuEvent evt) {
            }
            public void menuSelected(javax.swing.event.MenuEvent evt) {
                jMAlterarMoedaMenuSelected(evt);
            }
        });
        jMAlterarMoeda.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jMAlterarMoedaItemStateChanged(evt);
            }
        });
        jMAlterarMoeda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMAlterarMoedaActionPerformed(evt);
            }
        });
        jMBMenuPrincipal.add(jMAlterarMoeda);

        setJMenuBar(jMBMenuPrincipal);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 806, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 393, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
      
        try {
            //atualiza dados do usuario logado
            dao_acesso.retornaUsuarioLogado(acesso);
            //Inclui a opção todas telas como primeira opção
            tela.setDescricao("Todas telas");
            tela.setId_tela(1);
            dao_tela.incluir(tela);
            
            //Inclui a a tela de Pessoas
            tela.setDescricao("Pessoas");
            tela.setId_tela(2);
            dao_tela.incluir(tela);
            
            //Armazena dados de acesso da tela para verificar permissões
            acesso.setId_tela(2);
            acesso.setNome_tela("Pessoas");
            
            //se naõ for gerente
            if(acesso.getIn_gerente() == 0){
                //retorna as permissoes de acesso do usuario  
                dao_permissao.retornaDadosPermissao(acesso, permissao);
            } 
          
           //Verifica se o usuario possui permissao para acessar essa tela
           if (validaacesso.verificaAcesso("acesso",acesso, permissao) == true){
                //Traz para tela a tela de cadastro de pessoas 
                new InterfacePessoa().setVisible(true);
           }else{
               JOptionPane.showMessageDialog(null, "Voce não possui permissões para acessar essa tela"); 
           }
            
        } catch (SQLException ex) {
            Logger.getLogger(InterfacePessoa.class.getName()).log(Level.SEVERE, null, ex);
        }
        jMCadastros.setSelected(false);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        try {
            //atualiza dados do usuario logado
            dao_acesso.retornaUsuarioLogado(acesso);
            
            //Inclui a opção todas telas como primeira opção
            tela.setDescricao("Todas telas");
            tela.setId_tela(1);
            dao_tela.incluir(tela);
            
            //Inclui a tela de Moedas
            tela.setDescricao("Moedas");
            tela.setId_tela(3);
            dao_tela.incluir(tela);
            
            //Armazena dados de acesso da tela para verificar permissões
            acesso.setId_tela(3);
            acesso.setNome_tela("Moedas");
            
            //se naõ for gerente
            if(acesso.getIn_gerente() == 0){
                //retorna as permissoes de acesso do usuario  
                dao_permissao.retornaDadosPermissao(acesso, permissao);
            } 
          
           //Verifica se o usuario possui permissao para acessar essa tela
           if (validaacesso.verificaAcesso("acesso",acesso, permissao) == true){
                //Traz para tela a tela de cadastro de pessoas 
                new InterfaceCadMoeda().setVisible(true);
           }else{
               JOptionPane.showMessageDialog(null, "Voce não possui permissões para acessar essa tela"); 
           }
            
        } catch (SQLException ex) {
            Logger.getLogger(InterfacePessoa.class.getName()).log(Level.SEVERE, null, ex);
        }
        jMCadastros.setSelected(false);
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem1AncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_jMenuItem1AncestorAdded
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem1AncestorAdded

    private void jMAlterarMoedaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMAlterarMoedaActionPerformed
        
    }//GEN-LAST:event_jMAlterarMoedaActionPerformed

    private void jMAlterarMoedaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jMAlterarMoedaItemStateChanged
        
    }//GEN-LAST:event_jMAlterarMoedaItemStateChanged

    private void jMAlterarMoedaMenuSelected(javax.swing.event.MenuEvent evt) {//GEN-FIRST:event_jMAlterarMoedaMenuSelected

    }//GEN-LAST:event_jMAlterarMoedaMenuSelected

    private void jMBMenuPrincipalFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jMBMenuPrincipalFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_jMBMenuPrincipalFocusGained

    private void jMAlterarMoedaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMAlterarMoedaMouseClicked
          
        try {
            //atualiza dados do usuario logado
            dao_acesso.retornaUsuarioLogado(acesso);
            
            //Inclui a opção todas telas como primeira opção
            tela.setDescricao("Todas telas");
            tela.setId_tela(1);
            dao_tela.incluir(tela);
            
            //Inclui a tela de Moedas
            tela.setDescricao("Atualizar valor moedas");
            tela.setId_tela(4);
            dao_tela.incluir(tela);
            
            //Armazena dados de acesso da tela para verificar permissões
            acesso.setId_tela(4);
            acesso.setNome_tela("Atualizar valor moedas");
            
            //se naõ for gerente
            if(acesso.getIn_gerente() == 0){
                //retorna as permissoes de acesso do usuario  
                dao_permissao.retornaDadosPermissao(acesso, permissao);
            } 
          
           //Verifica se o usuario possui permissao para acessar essa tela
           if (validaacesso.verificaAcesso("acesso",acesso, permissao) == true){
                //Traz para tela a tela de cadastro de pessoas 
                new InterfaceAtualizarValorMoeda().setVisible(true);
           }else{
               JOptionPane.showMessageDialog(null, "Voce não possui permissões para acessar essa tela"); 
           }
            
        } catch (SQLException ex) {
            Logger.getLogger(InterfacePessoa.class.getName()).log(Level.SEVERE, null, ex);
        }
        jMAlterarMoeda.setSelected(false);
    }//GEN-LAST:event_jMAlterarMoedaMouseClicked

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
          try {
            //atualiza dados do usuario logado
            dao_acesso.retornaUsuarioLogado(acesso);
            
            //Inclui a opção todas telas como primeira opção
            tela.setDescricao("Todas telas");
            tela.setId_tela(1);
            dao_tela.incluir(tela);
            
            //Inclui a tela de Moedas
            tela.setDescricao("Cidades");
            tela.setId_tela(5);
            dao_tela.incluir(tela);
            
            //Armazena dados de acesso da tela para verificar permissões
            acesso.setId_tela(5);
            acesso.setNome_tela("Cidades");
            
            //se naõ for gerente
            if(acesso.getIn_gerente() == 0){
                //retorna as permissoes de acesso do usuario  
                dao_permissao.retornaDadosPermissao(acesso, permissao);
            } 
          
           //Verifica se o usuario possui permissao para acessar essa tela
           if (validaacesso.verificaAcesso("acesso",acesso, permissao) == true){
                //Traz para tela a tela de cadastro de pessoas 
                new InterfaceCidade().setVisible(true);
           }else{
               JOptionPane.showMessageDialog(null, "Voce não possui permissões para acessar essa tela"); 
           }
            
        } catch (SQLException ex) {
            Logger.getLogger(InterfacePessoa.class.getName()).log(Level.SEVERE, null, ex);
        }
          
        jMCadastros.setSelected(false);
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
         try {
            //atualiza dados do usuario logado
            dao_acesso.retornaUsuarioLogado(acesso);
            
            //Inclui a opção todas telas como primeira opção
            tela.setDescricao("Todas telas");
            tela.setId_tela(1);
            dao_tela.incluir(tela);
            
            //Inclui a tela de Moedas
            tela.setDescricao("Países");
            tela.setId_tela(7);
            dao_tela.incluir(tela);
            
            //Armazena dados de acesso da tela para verificar permissões
            acesso.setId_tela(7);
            acesso.setNome_tela("Países");
            
            //se naõ for gerente
            if(acesso.getIn_gerente() == 0){
                //retorna as permissoes de acesso do usuario  
                dao_permissao.retornaDadosPermissao(acesso, permissao);
            } 
          
           //Verifica se o usuario possui permissao para acessar essa tela
           if (validaacesso.verificaAcesso("acesso",acesso, permissao) == true){
                //Traz para tela a tela de cadastro de pessoas 
                new InterfacePaís().setVisible(true);
           }else{
               JOptionPane.showMessageDialog(null, "Voce não possui permissões para acessar essa tela"); 
           }
            
        } catch (SQLException ex) {
            Logger.getLogger(InterfacePessoa.class.getName()).log(Level.SEVERE, null, ex);
        }
        jMCadastros.setSelected(false);
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
         try {
            //atualiza dados do usuario logado
            dao_acesso.retornaUsuarioLogado(acesso);
            
            //Inclui a opção todas telas como primeira opção
            tela.setDescricao("Todas telas");
            tela.setId_tela(1);
            dao_tela.incluir(tela);
            
            //Inclui a tela de Moedas
            tela.setDescricao("Estados");
            tela.setId_tela(6);
            dao_tela.incluir(tela);
            
            //Armazena dados de acesso da tela para verificar permissões
            acesso.setId_tela(6);
            acesso.setNome_tela("Estados");
            
            //se naõ for gerente
            if(acesso.getIn_gerente() == 0){
                //retorna as permissoes de acesso do usuario  
                dao_permissao.retornaDadosPermissao(acesso, permissao);
            } 
          
           //Verifica se o usuario possui permissao para acessar essa tela
           if (validaacesso.verificaAcesso("acesso",acesso, permissao) == true){
                //Traz para tela a tela de cadastro de pessoas 
                new InterfaceEstado().setVisible(true);
           }else{
               JOptionPane.showMessageDialog(null, "Voce não possui permissões para acessar essa tela"); 
           }
            
        } catch (SQLException ex) {
            Logger.getLogger(InterfacePessoa.class.getName()).log(Level.SEVERE, null, ex);
        }
        jMCadastros.setSelected(false);
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMAlterarMoedaMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMAlterarMoedaMouseEntered
      
    }//GEN-LAST:event_jMAlterarMoedaMouseEntered

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        try {
            //atualiza dados do usuario logado
            dao_acesso.retornaUsuarioLogado(acesso);
            
            //Inclui a opção todas telas como primeira opção
            tela.setDescricao("Todas telas");
            tela.setId_tela(1);
            dao_tela.incluir(tela);
            
            //Inclui a tela de Projetos
            tela.setDescricao("Projetos");
            tela.setId_tela(8);
            dao_tela.incluir(tela);
            
            //Armazena dados de acesso da tela para verificar permissões
            acesso.setId_tela(8);
            acesso.setNome_tela("Projetos");
            
            //se naõ for gerente
            if(acesso.getIn_gerente() == 0){
                //retorna as permissoes de acesso do usuario  
                dao_permissao.retornaDadosPermissao(acesso, permissao);
            } 
          
           //Verifica se o usuario possui permissao para acessar essa tela
           if (validaacesso.verificaAcesso("acesso",acesso, permissao) == true){
                //Traz para tela a tela de cadastro de pessoas 
                new InterfaceProjeto().setVisible(true);
           }else{
               JOptionPane.showMessageDialog(null, "Voce não possui permissões para acessar essa tela"); 
           }
            
        } catch (SQLException ex) {
            Logger.getLogger(InterfacePessoa.class.getName()).log(Level.SEVERE, null, ex);
        }
        jMCadastros.setSelected(false);
    }//GEN-LAST:event_jMenuItem6ActionPerformed

    private void jMenuItem7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem7ActionPerformed
        try {
            //atualiza dados do usuario logado
            dao_acesso.retornaUsuarioLogado(acesso);
            
            //Inclui a opção todas telas como primeira opção
            tela.setDescricao("Todas telas");
            tela.setId_tela(1);
            dao_tela.incluir(tela);
            
            //Inclui a tela de Projetos
            tela.setDescricao("Componentes");
            tela.setId_tela(9);
            dao_tela.incluir(tela);
            
            //Armazena dados de acesso da tela para verificar permissões
            acesso.setId_tela(9);
            acesso.setNome_tela("Componentes");
            
            //se naõ for gerente
            if(acesso.getIn_gerente() == 0){
                //retorna as permissoes de acesso do usuario  
                dao_permissao.retornaDadosPermissao(acesso, permissao);
            } 
          
           //Verifica se o usuario possui permissao para acessar essa tela
           if (validaacesso.verificaAcesso("acesso",acesso, permissao) == true){
                //Traz para tela a tela de cadastro de pessoas 
                new InterfaceComponente().setVisible(true);
           }else{
               JOptionPane.showMessageDialog(null, "Voce não possui permissões para acessar essa tela"); 
           }
            
        } catch (SQLException ex) {
            Logger.getLogger(InterfacePessoa.class.getName()).log(Level.SEVERE, null, ex);
        }
        jMCadastros.setSelected(false);
    }//GEN-LAST:event_jMenuItem7ActionPerformed

    private void jMenuItem8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem8ActionPerformed
        try {
            //atualiza dados do usuario logado
            dao_acesso.retornaUsuarioLogado(acesso);
            
            //Inclui a opção todas telas como primeira opção
            tela.setDescricao("Todas telas");
            tela.setId_tela(1);
            dao_tela.incluir(tela);
            
            //Inclui a tela de Materiais
            tela.setDescricao("Materiais");
            tela.setId_tela(10);
            dao_tela.incluir(tela);
            
            //Armazena dados de acesso da tela para verificar permissões
            acesso.setId_tela(10);
            acesso.setNome_tela("Materiais");
            
            //se naõ for gerente
            if(acesso.getIn_gerente() == 0){
                //retorna as permissoes de acesso do usuario  
                dao_permissao.retornaDadosPermissao(acesso, permissao);
            } 
          
           //Verifica se o usuario possui permissao para acessar essa tela
           if (validaacesso.verificaAcesso("acesso",acesso, permissao) == true){
                //Traz para tela a tela de cadastro de pessoas 
                new InterfaceMaterial().setVisible(true);
           }else{
               JOptionPane.showMessageDialog(null, "Voce não possui permissões para acessar essa tela"); 
           }
            
        } catch (SQLException ex) {
            Logger.getLogger(InterfacePessoa.class.getName()).log(Level.SEVERE, null, ex);
        }
        jMCadastros.setSelected(false);
    }//GEN-LAST:event_jMenuItem8ActionPerformed

    private void jMenuItem9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem9ActionPerformed
        try {
            //atualiza dados do usuario logado
            dao_acesso.retornaUsuarioLogado(acesso);
            
            //Inclui a opção todas telas como primeira opção
            tela.setDescricao("Todas telas");
            tela.setId_tela(1);
            dao_tela.incluir(tela);
            
            //Inclui a tela de Materiais
            tela.setDescricao("Datasheets");
            tela.setId_tela(11);
            dao_tela.incluir(tela);
            
            //Armazena dados de acesso da tela para verificar permissões
            acesso.setId_tela(11);
            acesso.setNome_tela("Datasheets");
            
            //se naõ for gerente
            if(acesso.getIn_gerente() == 0){
                //retorna as permissoes de acesso do usuario  
                dao_permissao.retornaDadosPermissao(acesso, permissao);
            } 
          
           //Verifica se o usuario possui permissao para acessar essa tela
           if (validaacesso.verificaAcesso("acesso",acesso, permissao) == true){
                //Traz para tela a tela de cadastro de pessoas 
                new InterfaceDatasheet().setVisible(true);
           }else{
               JOptionPane.showMessageDialog(null, "Voce não possui permissões para acessar essa tela"); 
           }
            
        } catch (SQLException ex) {
            Logger.getLogger(InterfacePessoa.class.getName()).log(Level.SEVERE, null, ex);
        }
        jMCadastros.setSelected(false);
    }//GEN-LAST:event_jMenuItem9ActionPerformed

    private void jMCadastrosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMCadastrosActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMCadastrosActionPerformed

    private void jMenuItem10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem10ActionPerformed
         try {
            //atualiza dados do usuario logado
            dao_acesso.retornaUsuarioLogado(acesso);
            
            //Inclui a opção todas telas como primeira opção
            tela.setDescricao("Todas telas");
            tela.setId_tela(1);
            dao_tela.incluir(tela);
            
            //Inclui a tela de Materiais
            tela.setDescricao("Fornecimentos");
            tela.setId_tela(12);
            dao_tela.incluir(tela);
            
            //Armazena dados de acesso da tela para verificar permissões
            acesso.setId_tela(12);
            acesso.setNome_tela("Fornecimentos");
            
            //se naõ for gerente
            if(acesso.getIn_gerente() == 0){
                //retorna as permissoes de acesso do usuario  
                dao_permissao.retornaDadosPermissao(acesso, permissao);
            } 
          
           //Verifica se o usuario possui permissao para acessar essa tela
           if (validaacesso.verificaAcesso("acesso",acesso, permissao) == true){
                //Traz para tela a tela de cadastro de pessoas 
                new InterfaceFornecimento().setVisible(true);
           }else{
               JOptionPane.showMessageDialog(null, "Voce não possui permissões para acessar essa tela"); 
           }
            
        } catch (SQLException ex) {
            Logger.getLogger(InterfacePessoa.class.getName()).log(Level.SEVERE, null, ex);
        }
        jMCadastros.setSelected(false);
    }//GEN-LAST:event_jMenuItem10ActionPerformed

    private void jMGerenciarProjetosMenuSelected(javax.swing.event.MenuEvent evt) {//GEN-FIRST:event_jMGerenciarProjetosMenuSelected
            
    }//GEN-LAST:event_jMGerenciarProjetosMenuSelected

    private void jMGerenciarProjetosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMGerenciarProjetosMouseClicked
        
    }//GEN-LAST:event_jMGerenciarProjetosMouseClicked

    private void jMGerenciarProjetosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMGerenciarProjetosActionPerformed
        
        
    }//GEN-LAST:event_jMGerenciarProjetosActionPerformed

    private void jMenuItem11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem11ActionPerformed
         try {
            //atualiza dados do usuario logado
            dao_acesso.retornaUsuarioLogado(acesso);
            
            //Inclui a opção todas telas como primeira opção
            tela.setDescricao("Todas telas");
            tela.setId_tela(1);
            dao_tela.incluir(tela);
            
            //Inclui a tela de Materiais
            tela.setDescricao("Versões Projetos");
            tela.setId_tela(13);
            dao_tela.incluir(tela);
            
            //Armazena dados de acesso da tela para verificar permissões
            acesso.setId_tela(13);
            acesso.setNome_tela("Versões Projetos");
            
            //se naõ for gerente
            if(acesso.getIn_gerente() == 0){
                //retorna as permissoes de acesso do usuario  
                dao_permissao.retornaDadosPermissao(acesso, permissao);
            } 
          
           //Verifica se o usuario possui permissao para acessar essa tela
           if (validaacesso.verificaAcesso("acesso",acesso, permissao) == true){
                //Traz para tela a tela de cadastro de pessoas 
                new InterfaceVersaoProjeto().setVisible(true);
           }else{
               JOptionPane.showMessageDialog(null, "Voce não possui permissões para acessar essa tela"); 
           }
            
        } catch (SQLException ex) {
            Logger.getLogger(InterfacePessoa.class.getName()).log(Level.SEVERE, null, ex);
        }
        jMGerenciarProjetos.setSelected(false);
    }//GEN-LAST:event_jMenuItem11ActionPerformed

    private void jMCustosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMCustosMouseClicked
        try {
            //atualiza dados do usuario logado
            dao_acesso.retornaUsuarioLogado(acesso);
            
            //Inclui a opção todas telas como primeira opção
            tela.setDescricao("Todas telas");
            tela.setId_tela(1);
            dao_tela.incluir(tela);
            
            //Inclui a tela de Materiais
            tela.setDescricao("Custos Projetos");
            tela.setId_tela(14);
            dao_tela.incluir(tela);
            
            //Armazena dados de acesso da tela para verificar permissões
            acesso.setId_tela(14);
            acesso.setNome_tela("Custos Projetos");
            
            //se naõ for gerente
            if(acesso.getIn_gerente() == 0){
               
                //retorna as permissoes de acesso do usuario  
                dao_permissao.retornaDadosPermissao(acesso, permissao);
            } 
          
           //Verifica se o usuario possui permissao para acessar essa tela
           if (validaacesso.verificaAcesso("acesso",acesso, permissao) == true){
                //Traz para tela a tela de cadastro de pessoas 
                new InterfaceCustosProjeto().setVisible(true);
           }else{
               JOptionPane.showMessageDialog(null, "Voce não possui permissões para acessar essa tela"); 
           }
            
        } catch (SQLException ex) {
            Logger.getLogger(InterfacePessoa.class.getName()).log(Level.SEVERE, null, ex);
        }
        jMCustos.setSelected(false);
    }//GEN-LAST:event_jMCustosMouseClicked

    private void jMenuItem13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem13ActionPerformed
        try {
            //atualiza dados do usuario logado
            dao_acesso.retornaUsuarioLogado(acesso);
            
            //Inclui a opção todas telas como primeira opção
            tela.setDescricao("Todas telas");
            tela.setId_tela(1);
            dao_tela.incluir(tela);
            
            //Inclui a tela de Projetos
            tela.setDescricao("Normas");
            tela.setId_tela(15);
            dao_tela.incluir(tela);
            
            //Armazena dados de acesso da tela para verificar permissões
            acesso.setId_tela(15);
            acesso.setNome_tela("Normas");
            
            //se naõ for gerente
            if(acesso.getIn_gerente() == 0){
                //retorna as permissoes de acesso do usuario  
                dao_permissao.retornaDadosPermissao(acesso, permissao);
            } 
          
           //Verifica se o usuario possui permissao para acessar essa tela
           if (validaacesso.verificaAcesso("acesso",acesso, permissao) == true){
                //Traz para tela a tela de cadastro de pessoas 
                new InterfaceNorma().setVisible(true);
           }else{
               JOptionPane.showMessageDialog(null, "Voce não possui permissões para acessar essa tela"); 
           }
            
        } catch (SQLException ex) {
            Logger.getLogger(InterfaceNorma.class.getName()).log(Level.SEVERE, null, ex);
        }
        jMCadastros.setSelected(false);
    }//GEN-LAST:event_jMenuItem13ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(InterfacePrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(InterfacePrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(InterfacePrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(InterfacePrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new InterfacePrincipal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu jMAlterarMoeda;
    private javax.swing.JMenuBar jMBMenuPrincipal;
    private javax.swing.JMenu jMCadastros;
    private javax.swing.JMenu jMCustos;
    private javax.swing.JMenu jMGerenciarProjetos;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem10;
    private javax.swing.JMenuItem jMenuItem11;
    private javax.swing.JMenuItem jMenuItem12;
    private javax.swing.JMenuItem jMenuItem13;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JMenuItem jMenuItem8;
    private javax.swing.JMenuItem jMenuItem9;
    // End of variables declaration//GEN-END:variables
}
